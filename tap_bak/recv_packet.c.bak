#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <sys/fcntl.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <stdint.h>
#include <unistd.h>
#include <inttypes.h>
#include <net/if.h>
#include <linux/if_tun.h>
#include <sys/ioctl.h>
#include <sys/stat.h>
#include <fcntl.h>
//#include "sha1.h"

#define P_MAX_SIZE 12000
#define P_MAX_NUM  200

//#include "relaycli.h"

int clsocket;
char destination[20] = "192.168.100.10"; 
unsigned short port = 9873;
int numrcv;

/* sockaddr_in構造体 */
struct sockaddr_in cl_addr;



int tun_alloc(char *dev, int flags) {

	struct ifreq ifr;
	int fd, err;
	char *clonedev = "/dev/net/tun";

	if( (fd = open(clonedev , O_RDWR)) < 0 ) {
		perror("Opening /dev/net/tun");
		return fd;
	}

	memset(&ifr, 0, sizeof(ifr));

	ifr.ifr_flags = flags;

	if (*dev) {
		strncpy(ifr.ifr_name, dev, IFNAMSIZ);
	}

	if( (err = ioctl(fd, TUNSETIFF, (void *)&ifr)) < 0 ) {
		perror("ioctl(TUNSETIFF)");
		close(fd);
		return err;
	}

	strcpy(dev, ifr.ifr_name);

	return fd;
}


int main(int argc, char *argv[])
{
	int tap_fd, option;
	int flags = IFF_TAP;
	char if_name[IFNAMSIZ] = "";
	unsigned int size[P_MAX_NUM];
	unsigned int seq, allsize;
	int mode = 1;
	int rc;
	char buffer[P_MAX_SIZE];
	char hash[41];
	char recv_data[P_MAX_SIZE+sizeof(unsigned int)*(P_MAX_NUM+1)];
	int count = 0;

	if(argc < 2){
		printf("tap name\n");
		exit(1);
	}

	strncpy(if_name, argv[1], IFNAMSIZ-1);


	/* initialize tun/tap interface */
	if ( (tap_fd = tun_alloc(if_name, flags | IFF_NO_PI)) < 0 ) {
		printf("error:tun_alloc\n");
		exit(1);
	}

	//while(1){

	//	send(clsocket, &mode, sizeof(mode), 0);

	int tmpsize, i;  


#ifdef check

	while(1){

		for(i=0;i<P_MAX_NUM;i++){
			size[i] = 0;
		}

		//tmpsize = recv(clsocket, &size, sizeof(unsigned int)*P_MAX_NUM, 0);
		
		//tmpsizeを決定する
//		tmpsize = recv(clsocket, &size, sizeof(unsigned int)*P_MAX_NUM, 0);
		if(tmpsize < sizeof(unsigned int)*P_MAX_NUM){
			for(i = tmpsize; i < sizeof(unsigned int)*P_MAX_NUM; i+=tmpsize){
				tmpsize = recv(clsocket, &size+i, sizeof(unsigned int)*P_MAX_NUM-i, 0);
			}
		} 


		// allsize = 0;
		// tmpsize = recv(clsocket, buffer, allsize, 0);
		// tmpsize = recv(clsocket, &seq, sizeof(unsigned int), 0);
		// tmpsize = recv(clsocket, hash, 41, 0);

		//write to tap 
		tmpsize = 0;
		for(i=0; size[i]!=0; i++){
			//count++;
			if((write(tap_fd, buffer+tmpsize, size[i])) < 0){
				perror("Writing data");
				printf("are\n");
				//exit(1);
			}
			tmpsize += size[i];
		}
		//send(clsocket, &mode, sizeof(int), 0);

		/*
		   if((read(tap_fd, buffer, size)) < 0){
		   perror("reading data");
		   exit(1);
		   }*/
	}

#endif

	//printf("writing data:sleep 60 seconds\n");
	//sleep(30);
	//}

	return 0;
}

